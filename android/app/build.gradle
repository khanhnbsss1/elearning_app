def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}
def flutterCompileSdkVersion = localProperties.getProperty('flutter.compileSdkVersion')
if (flutterCompileSdkVersion == null) {
    flutterCompileSdkVersion = 34
}
def flutterMinSdkVersion = localProperties.getProperty('flutter.minSdkVersion')
if (flutterMinSdkVersion == null) {
    flutterMinSdkVersion = 26
}
def flutterTargetSdkVersion = localProperties.getProperty('flutter.targetSdkVersion')
if (flutterTargetSdkVersion == null) {
    flutterTargetSdkVersion = 34
}

def ElearningLmsAppName = localProperties.getProperty('flutter.ElearningLmsAppName')
if (ElearningLmsAppName == null) {
    ElearningLmsAppName = "YAX Chinese learning platform"
}

apply plugin: 'com.android.application'
// START: FlutterFire Configuration
apply plugin: 'com.google.gms.google-services'
//apply plugin: 'com.google.firebase.crashlytics'
// END: FlutterFire Configuration
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"
def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('key.properties')
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}
flutter {
    source '../..'
}

android {

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    packagingOptions {
        jniLibs {
            useLegacyPackaging true // Enabling flag to compress JNI Libs to reduce APK size Ref: https://developer.android.com/studio/releases/gradle-plugin#compress-native-libs-dsl
        }
    }

    namespace "com.fft_app"
    compileSdk flutterTargetSdkVersion.toInteger()
    ndkVersion '25.2.9519653'
    sourceSets {
        main {
            // Prevent gradle from building native code with ndk; we have our own Makefile for it.
            jniLibs.srcDir 'jni/libs' // Where generated .so files are placed
            assets.srcDirs = ['src/main/assets', '../assets/']
        }
    }
    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId "com.FFTCompany.elearninglms"
        minSdkVersion flutterMinSdkVersion.toInteger()
        targetSdkVersion flutterTargetSdkVersion.toInteger()
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        resConfigs 'en', 'Us', 'vi', 'Vn'
        multiDexEnabled true
        vectorDrawables.useSupportLibrary = true
    }
    signingConfigs {
        release {
            storeFile file("../../keys/androidKey/fft_navi_tracking.jks")
            storePassword "fft@123456"
            keyAlias "FFT_TRACKING"
            keyPassword "fft@123456"
            // Optional, specify signing versions used
            v1SigningEnabled true
            v2SigningEnabled true
        }
        debug {
            storeFile file("../../keys/debug.keystore")
            storePassword "android"
            keyAlias "AndroidDebugKey"
            keyPassword "android"
        }
        releaseElearningLms {
            storeFile file("../../keys/androidKey/" +
                    "" +
                    "" +
                    ".jks")
            storePassword "fft@123456"
            keyAlias "FFT_TRACKING"
            keyPassword "fft@123456"
            // Optional, specify signing versions used
            v1SigningEnabled true
            v2SigningEnabled true
        }
        releaseElearningLms1 {
            storeFile file("../../keys/androidKey/" +
                    "" +
                    "" +
                    ".jks")
            storePassword "fft@123456"
            keyAlias "FFT_TRACKING"
            keyPassword "fft@123456"
            // Optional, specify signing versions used
            v1SigningEnabled true
            v2SigningEnabled true
        }
    }
    buildTypes {

        debug{
            signingConfig signingConfigs.release
        }
        release {
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
            signingConfig signingConfigs.release
            aaptOptions.cruncherEnabled = true
            minifyEnabled false
            shrinkResources false /// enable de build lib ceiba trong release mode
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    flavorDimensions = ["app"]
    productFlavors {
        def flavorElearningLmsSigningVariable = signingConfigs.releaseElearningLms

        ElearningLms {
            dimension "app"
            applicationId "com.FFTCompany.elearninglms"
            resValue "string", "app_name", ElearningLmsAppName
            signingConfig flavorElearningLmsSigningVariable
        }
        

    }
}

flutter {
    source '../..'
}
